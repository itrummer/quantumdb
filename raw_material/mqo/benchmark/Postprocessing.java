package raw_material.mqo.benchmark;

import java.io.File;
import java.io.PrintWriter;

import raw_material.mqo.cplex.LinearMqoSolver;
import raw_material.mqo.cplex.QuadraticMqoSolver;
import raw_material.mqo.testcase.MqoProblem;
import raw_material.mqo.testcase.MqoProblemReader;
import raw_material.mqo.testcase.MqoSolution;
import raw_material.mqo.testcase.MqoSolutionReader;

/**
 * Transforms the solutions to the QUBO problems produced by D-Wave back into a MQO
 * solution and generates corresponding result files.
 * 
 * @author immanueltrummer
 *
 */
public class Postprocessing {
	public static void main(String[] args) throws Exception {
		// Use linear solver to generate optimal solutions
		LinearMqoSolver linearSolver = new LinearMqoSolver();
		// Also compare with quadratic solver
		QuadraticMqoSolver quadraticSolver = new QuadraticMqoSolver();
		// Iterate over all configurations
		for (int nrQueries : BenchmarkConfig.nrQueries) {
			for (int nrPlans : BenchmarkConfig.nrPlansPerQuery) {
				for (int nrResults : BenchmarkConfig.nrIntermediateResults) {
					// Open benchmark result file and write header
					String qualityResultPath = BenchmarkConfig.dwaveQualityResultsPath(
							nrQueries, nrPlans, nrResults);
					File qualityResultFile = new File(qualityResultPath);
					PrintWriter writer = new PrintWriter(qualityResultFile);
					writer.println("testcase,dwaveCost,linearCost,quadraticCost");
					// Iterate over test cases
					for (int testcaseCtr=0; testcaseCtr<BenchmarkConfig.NR_TESTCASES; ++testcaseCtr) {
						// Generate paths to the required files
						String testcasePath = BenchmarkConfig.dwaveTestcasePath(
								nrQueries, nrPlans, nrResults, testcaseCtr);
						String mappingPath = BenchmarkConfig.dwaveMappingPath(
								nrQueries, nrPlans, nrResults, testcaseCtr);
						String solutionPath = BenchmarkConfig.dwaveSolutionPath(
								nrQueries, nrPlans, nrResults, testcaseCtr);
						// Read test case and solution generated by D-Wave tools from disc
						MqoProblem problem = MqoProblemReader.readProblem(testcasePath);
						MqoSolution dwaveSolution = MqoSolutionReader.readSolution(
								testcasePath, mappingPath, solutionPath);
						MqoSolution linearSolution = linearSolver.solve(problem);
						MqoSolution quadraticSolution = quadraticSolver.solve(problem);
						// Compare cost of D-Wave solution to optimal solution
						double dwaveCost = dwaveSolution.getCost();
						double linearCost = linearSolution.getCost();
						double quadraticCost = quadraticSolution.getCost();
						// Output to console
						System.out.println("--- PROBLEM ---");
						problem.toConsole();
						System.out.println("--- DWAVE ---");
						dwaveSolution.toConsole();
						System.out.println("--- LINEAR ---");
						linearSolution.toConsole();
						System.out.println("--- QUADRATIC ---");
						quadraticSolution.toConsole();
						// Generate output
						writer.println(testcaseCtr + "," + dwaveCost + "," + linearCost + "," + quadraticCost);
					}
					// Close benchmark result file
					writer.close();
				}
			}
		}
	}
}
